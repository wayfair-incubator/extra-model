name: CI

# Triggers the workflow on push or pull request
# events but only for the main branch
on: [push, pull_request]

env:
  PYTHON_VERSION: "3.10"

jobs:
  bandit:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies
        with:
          test-requirements: "true"

      - name: Run bandit
        run: bandit --ini .bandit -r extra_model

  black:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies
        with:
          test-requirements: "true"

      - name: Run black
        run: black --check extra_model tests

  flake8:
    runs-on: ubuntu-latest
    steps:
        - name: Check out code
          uses: actions/checkout@v4
        - uses: actions/setup-python@v5.0.0
          with:
            python-version: ${{ env.PYTHON_VERSION }}
        - name: Install dependencies
          uses: ./.github/actions/install-dependencies
          with:
            test-requirements: "true"

        - name: Run flake8
          run: flake8 extra_model tests

  isort:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies
        with:
          requirements: "true"
          test-requirements: "true"

      - name: Run isort
        run: isort --recursive --check-only extra_model tests

  mypy:
    runs-on: ubuntu-latest
    steps:
        - name: Check out code
          uses: actions/checkout@v4
        - uses: actions/setup-python@v5.0.0
          with:
            python-version: ${{ env.PYTHON_VERSION }}
        - name: Install dependencies
          uses: ./.github/actions/install-dependencies
          with:
            test-requirements: "true"

        - name: Run mypy
          run: mypy extra_model tests

  pydocstyle:
    runs-on: ubuntu-latest
    steps:
        - name: Check out code
          uses: actions/checkout@v4
        - uses: actions/setup-python@v5.0.0
          with:
            python-version: ${{ env.PYTHON_VERSION }}
        - name: Install dependencies
          uses: ./.github/actions/install-dependencies
          with:
            test-requirements: "true"

        - name: Run pydocstyle
          run: pydocstyle extra_model

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]
    steps:
        - name: Check out code
          uses: actions/checkout@v4
        - uses: actions/setup-python@v5.0.0
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies
          uses: ./.github/actions/install-dependencies
          with:
            requirements: "true"
            test-requirements: "true"

        - name: Install spacy language pack
          uses: ./.github/actions/install-spacy-lang
          with:
            pack: en_core_web_sm

        - name: Install nltk wordnet resource
          run: python -m nltk.downloader wordnet

        - name: Install nltk punkt resource
          run: python -m nltk.downloader punkt

        - name: Install nltk omw-1.4 resource
          run: python -m nltk.downloader omw-1.4

        - name: Run pytest
          run: pytest --cov-report xml:coverage-${{ matrix.python-version }}.xml --junitxml=test-results-${{ matrix.python-version }}.xml

        # - name: Upload pytest test results artifact
        #   uses: actions/upload-artifact@v4
        #   with:
        #     name: pytest-results-${{ matrix.python-version }}
        #     path: test-results-${{ matrix.python-version }}.xml
        #   # Use always() to always run this step to publish test results when there are test failures
        #   if: ${{ always() }}

        # - name: Upload coverage results artifact
        #   uses: actions/upload-artifact@v4
        #   with:
        #     name: pytest-coverage-${{ matrix.python-version }}
        #     path: coverage-${{ matrix.python-version }}.xml
        #   # Use always() to always run this step to publish test results when there are test failures
        #   if: ${{ always() }}

        # - name: Publish coverage results to Codecov
        #   uses: codecov/codecov-action@v4
        #   with:
        #     file: coverage-${{ matrix.python-version }}.xml
        #     fail_ci_if_error: true
        #     token: ${{ secrets.CODECOV_TOKEN }}

  verify-wheel:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Verify wheel
        uses: ./.github/actions/verify-wheel
        with:
          package-import-name: "extra_model"
